  
#include<stdio.h>
#include<stdlib.h>

/**BY AVI**/
struct node
{
	int  datas;
	struct node *r;
	struct node *l;
}*root=NULL;


struct nodes
{
	struct node *data;
	struct nodes *next;
}*top=NULL;


void push(struct node *x)
{
	struct nodes *temp;
	temp=(struct nodes *)malloc(sizeof(struct nodes));
	temp->data=x;
	temp->next=top;
	top=temp;
}

struct node  *pop()
{
	struct nodes *temp;
	temp=top;
	struct node *x=temp->data;
	top=top->next;
	free(temp);
	return x;
}

int stop1()
{
	if(top==NULL)
		return 100000;
	else
		return top->data->datas;

}


void preorder(struct node *p)
{
	if(p)
	{
		printf("%c ",p->datas);
		preorder(p->l);
		preorder(p->r);
	}
}


void inorder(struct node *p)
{
	if(p)
	{
		inorder(p->l);
		printf("%c ",p->datas);
		inorder(p->r);
	}
}


void postorder(struct node *p)
{
	if(p)
	{
		
		postorder(p->l);
		postorder(p->r);
		printf("%c ",p->datas);
	}
}


int main()
{

	char ch;
	printf("Enter the no. of node you want  to enter in binary search tree\n");
	int n;
	int i=0;
	scanf("%d",&n);
	char B[100];
	int A[100];
	printf("Enter the elements of binary search tree in preorder\n");
	scanf("%c",&ch);
	for(;i<n;i++)
	{
		scanf("%c",&B[i]);
		scanf("%c",&ch);
	}
	i=0;
	for(;i<n;i++)
	{
		A[i]=B[i];
	}
	i=0;
	root=(struct node *)malloc(sizeof(struct node));
	root->datas=A[i++];
	root->r=root->l=NULL;
	struct node *p=root;
	
	while(i<n)
	{
		if(A[i]<p->datas)
		{
			struct node *t;
			t=(struct node *)malloc(sizeof(struct node));
			t->datas=A[i++];
			t->r=t->l=NULL;
			p->l=t;
			push(p);
			p=t;
		}
		else
		{
			if(A[i]>p->datas&&A[i]<stop1())
			{
				struct node *t;
				t=(struct node *)malloc(sizeof(struct node));
				t->datas=A[i++];
				t->r=t->l=NULL;
				p->r=t;
				p=t;
			}
			else
				p=pop();
		}
	}
	
	printf("\nThe preorder traversal is\n");
	preorder(root);

	printf("\n\nThe inorder traversal is\n");
	inorder(root);

	printf("\n\nThe postorder traversal is\n");
	postorder(root);

	return 0;
}
